# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master

pool:
  vmImage: 'VS2017-Win2016'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  versionToBuild: ''
  

name: $(BuildID)

steps:

- script: |
    set /p VER=<src/version.txt
    @echo ##vso[task.setvariable variable=versionToBuild]%VER%

- script: |
    echo The version from src/version.txt is $(versionToBuild)
    @echo ##vso[build.updatebuildnumber]$(versionToBuild).$(build.buildnumber)

- task: NuGetToolInstaller@0

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

# update assembly version
- powershell: |
    function Update-SourceVersion
    {
        Param ([string]$Version)
        $NewVersion = 'AssemblyVersion("' + $Version + '")';
        Write-output $NewVersion
        $NewFileVersion = 'AssemblyFileVersion("' + $Version + '")';
        foreach ($o in $input) 
        {
            Write-output $o.FullName
            $TmpFile = $o.FullName + ".tmp"
            get-content $o.FullName | 
            %{$_ -replace 'AssemblyVersion\("[0-9]+(\.([0-9]+|\*)){1,3}"\)', $NewVersion } |
            %{$_ -replace 'AssemblyFileVersion\("[0-9]+(\.([0-9]+|\*)){1,3}"\)', $NewFileVersion }  > $TmpFile

            move-item $TmpFile $o.FullName -force
        }
    }
    foreach ($file in "AssemblyInfo.cs", "AssemblyInfo.vb" ) 
    {
        get-childitem -recurse |? {$_.Name -eq $file} | Update-SourceVersion $(build.buildnumber) ;
    }
   
- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: NuGetCommand@2
  inputs:
    command: pack
    packagesToPack: '**/*.csproj'
    versioningScheme: byBuildNumber
    packDestination: '$(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: Output